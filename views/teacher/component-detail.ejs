<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= componentName %> - SmartAC</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />
    <link rel="stylesheet" href="/css/theme-toggle.css">
    <!-- Import the model-viewer component for AR support -->
    <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: var(--body-bg);
            color: var(--text-color);
            padding-top: 60px; /* Adjusted padding for fixed header */
            -webkit-tap-highlight-color: transparent; /* Removes tap highlight on mobile */
            touch-action: manipulation; /* Improves touch response */
        }
        
        /* Mobile optimizations */
        @media (max-width: 768px) {
            .container {
                padding-left: 15px;
                padding-right: 15px;
            }
            
            h1 {
                font-size: 1.8rem;
            }
            
            .lead {
                font-size: 1rem;
            }
            
            .card {
                margin-bottom: 1rem;
            }
            
            .model-controls {
                flex-direction: column;
                gap: 15px;
            }
            
            .model-controls > div {
                display: flex;
                justify-content: center;
                width: 100%;
            }
            
            #viewAR {
                width: 100%;
                justify-content: center;
            }
        }
        .component-header {
            padding: 2rem 0;
            margin-bottom: 2rem;
            background: linear-gradient(135deg, rgba(25, 25, 25, 0.9), rgba(40, 40, 40, 0.9));
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .card {
            border-radius: 16px;
            box-shadow: 0 10px 20px rgba(0, 202, 188, 0.08);
            border: none;
            overflow: hidden;
            background-color: #1a1a1a;
            color: #ffffff;
            margin-bottom: 1.5rem;
        }
        .card-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 1.25rem 1.5rem;
            background-color: #222222;
            color: #ffffff;
        }
        .card-body {
            padding: 1.5rem;
        }
        .list-group-item {
            background-color: #1a1a1a;
            border-color: rgba(255, 255, 255, 0.1);
            color: #ffffff;
        }
        .model-container {
            height: 500px;
            position: relative;
            background-color: #222222;
        }
        .model-controls {
            background-color: #222222;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }
        .footer-wrapper {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        
        /* AR Experience Styles */
        model-viewer {
            --poster-color: transparent;
            background-color: #222222;
        }
        
        .ar-prompt {
            position: absolute;
            left: 50%;
            bottom: 175px;
            transform: translateX(-50%);
            width: 80%;
            max-width: 400px;
            background-color: #222222;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.3);
            padding: 20px;
            text-align: center;
            z-index: 1000;
        }
        
        .ar-prompt__title {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 8px;
            color: #ffffff;
        }
        
        .ar-prompt__subtitle {
            font-size: 14px;
            color: #aaaaaa;
        }
    </style>
</head>
<body class="animate__animated animate__fadeIn" style="background-color: #121212; color: #ffffff;">
    <div class="container-fluid p-0 footer-wrapper">
        <!-- Include teacher header partial -->
        <%- include('../partials/teacher-header', { user: user, activePage: 'components' }) %>

        <div class="component-header">
            <div class="container">
                <div class="d-flex align-items-center">
                    <a href="/teacher/components" class="btn btn-primary rounded-pill px-4 py-2 shadow-sm me-3">
                        <i class="bi bi-arrow-left me-1"></i> Back to Components
                    </a>
                    <div>
                        <h1 class="mb-0" style="color: #ffffff;"><%= componentName %></h1>
                        <p class="lead" style="color: #aaaaaa;">Explore the 3D model and learn about this component</p>
                    </div>
                </div>
            </div>
        </div>

    <div class="container mb-5">
        <div class="row">
            <div class="col-lg-8" data-aos="fade-up" data-aos-duration="800">
                <div class="card shadow-sm mb-4" style="border-radius: 20px; overflow: hidden; background-color: #1a1a1a; color: #ffffff;">
                    <div class="card-header p-4">
                        <h4 class="mb-0"><i class="bi bi-cube me-2"></i>3D Model Viewer</h4>
                    </div>
                    <div class="card-body p-4">
                        <div class="model-container rounded-4 overflow-hidden mb-4" id="componentModelContainer" data-model="<%= modelFile %>" style="border: 1px solid rgba(255,255,255,0.1);">
                            <!-- Three.js model viewer (default) -->
                            <div id="threeJsContainer" class="h-100">
                                <div class="d-flex justify-content-center align-items-center h-100">
                                    <div class="text-center p-4 rounded-4" style="background-color: rgba(0,0,0,0.3);">
                                        <div class="spinner-border text-primary mb-3" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="text-light">Loading 3D model...</p>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Model Viewer for AR (hidden by default) -->
                            <model-viewer id="arModelViewer" 
                                src="/models/<%= modelFile %>" 
                                alt="<%= componentName %> 3D Model"
                                ar 
                                ar-modes="webxr scene-viewer quick-look" 
                                ar-scale="auto"
                                camera-controls 
                                touch-action="pan-y"
                                shadow-intensity="1" 
                                auto-rotate 
                                rotation-per-second="30deg"
                                environment-image="neutral"
                                exposure="0.8"
                                camera-orbit="0deg 75deg 2m"
                                field-of-view="30deg"
                                min-camera-orbit="auto auto auto"
                                max-camera-orbit="auto auto auto"
                                interaction-prompt="auto"
                                style="width: 100%; height: 100%; display: none;" 
                                ar-status="not-presenting"
                                ar-placement="floor"
                                seamless-poster>
                                <button slot="ar-button" id="arActivateButton" class="rounded-pill" style="background: linear-gradient(135deg, #FF5F6D, #FFC371); color: white; border: none; font-weight: bold; padding: 12px 24px; box-shadow: 0 4px 8px rgba(0,0,0,0.2);">Activate AR</button>
                                <div class="ar-prompt" slot="ar-prompt">
                                    <div class="ar-prompt__content rounded-4 p-3">
                                        <div class="ar-prompt__title">ðŸ‘‹ Place the component in your space</div>
                                        <div class="ar-prompt__subtitle">Move your device around to place the 3D model in your environment</div>
                                    </div>
                                </div>
                                <!-- Loading UI -->
                                <div slot="poster" class="d-flex justify-content-center align-items-center h-100">
                                    <div class="text-center p-4 rounded-4 bg-dark bg-opacity-75">
                                        <div class="spinner-border text-primary mb-3" role="status">
                                            <span class="visually-hidden">Loading AR model...</span>
                                        </div>
                                        <p class="text-light">Preparing AR experience...</p>
                                    </div>
                                </div>
                                <!-- Progress bar for model loading -->
                                <div slot="progress-bar" class="progress position-absolute bottom-0 w-100 mx-auto" style="height: 8px; max-width: 95%;">
                                    <div class="progress-bar bg-primary rounded-pill" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                            </model-viewer>
                        </div>
                        <div class="model-controls p-4 d-flex justify-content-between align-items-center bg-dark rounded-4">
                            
                            <a href="/teacher/ar-viewer?model=<%= modelFile %>&name=<%= componentName %>" class="btn btn-lg rounded-pill px-5 py-3 shadow mx-auto" id="viewAR" target="_blank" style="background: linear-gradient(135deg, #FF5F6D, #FFC371); color: white; border: none; font-weight: bold; min-width: 240px; display: flex; justify-content: center; align-items: center;"><i class="bi bi-phone me-2"></i>Lihat dalam AR</a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4" data-aos="fade-up" data-aos-duration="800" data-aos-delay="100">
                <div class="card shadow-sm mb-4" data-aos="fade-up" data-aos-duration="800" style="background-color: #1a1a1a; color: #ffffff;">
                    <div class="card-header p-4">
                        <h4 class="mb-0"><i class="bi bi-info-circle me-2"></i>Component Information</h4>
                    </div>
                    <div class="card-body" id="componentInfo">
                        <div class="text-center p-4">
                            <div class="spinner-border text-primary mb-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="text-light">Loading component information...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Include teacher footer partial -->
    <%- include('../partials/teacher-footer') %>
    </div> <!-- End of footer-wrapper -->

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/loaders/GLTFLoader.js"></script>
    <script>
        // Initialize the 3D model viewer
        document.addEventListener('DOMContentLoaded', function() {
            // Component information data
            const componentInfo = {
                'PressureSwitch': {
                    name: 'Pressure Switch',
                    description: 'The pressure switch is a safety device that monitors the refrigerant pressure in the AC system. It will shut off the compressor if the pressure gets too high or too low, protecting the system from damage.',
                    function: 'Controls the compressor based on refrigerant pressure levels',
                    location: 'Usually mounted on the high pressure line near the compressor',
                    maintenance: 'Check electrical connections and pressure calibration during system service'
                },
                'ReceiverDrier': {
                    name: 'Receiver Drier',
                    description: 'The receiver drier is a component that removes moisture from the refrigerant and stores excess refrigerant. It contains a desiccant material that absorbs moisture, preventing acid formation and system damage.',
                    function: 'Removes moisture from the refrigerant and stores excess refrigerant',
                    location: 'Typically located in the high pressure line between the condenser and expansion valve',
                    maintenance: 'Should be replaced when the system is opened for service or every 3-5 years'
                },
                'Compressor': {
                    name: 'Compressor',
                    description: 'The compressor is the heart of the AC system. It compresses the refrigerant gas, raising its pressure and temperature before sending it to the condenser.',
                    function: 'Compresses refrigerant gas to increase its pressure and temperature',
                    location: 'Usually mounted on the engine and driven by the serpentine belt',
                    maintenance: 'Check for leaks, unusual noises, and proper clutch engagement'
                },
                'Condenser': {
                    name: 'Condenser',
                    description: 'The condenser is a heat exchanger that releases heat from the refrigerant to the outside air. As the refrigerant cools, it condenses from a gas to a liquid.',
                    function: 'Releases heat from the refrigerant to the outside air, condensing it from a gas to a liquid',
                    location: 'Mounted at the front of the vehicle, usually in front of the radiator',
                    maintenance: 'Keep fins clean and free of debris, check for leaks or damage'
                },
                'TXV': {
                    name: 'Thermal Expansion Valve (TXV)',
                    description: 'The thermal expansion valve controls the flow of refrigerant into the evaporator. It maintains the proper pressure difference between the high and low sides of the system.',
                    function: 'Regulates refrigerant flow based on temperature and pressure conditions',
                    location: 'Located between the receiver drier and the evaporator',
                    maintenance: 'Check for proper operation during system service'
                },
                'EvaporatorCoil': {
                    name: 'Evaporator Coil',
                    description: 'The evaporator coil absorbs heat from the cabin air. As the refrigerant evaporates inside the coil, it absorbs heat, cooling the air that passes over it.',
                    function: 'Absorbs heat from the cabin air, cooling it before it enters the passenger compartment',
                    location: 'Located inside the dashboard, as part of the HVAC system',
                    maintenance: 'Check for leaks, clean periodically to prevent mold and mildew'
                },
                'SightGlass': {
                    name: 'Sight Glass',
                    description: 'The sight glass is a transparent section of the refrigerant line that allows visual inspection of the refrigerant condition. It helps in determining if the system is properly charged or if there is moisture in the system.',
                    function: 'Provides a visual indication of refrigerant flow and helps diagnose charge level and moisture presence',
                    location: 'Typically installed in the liquid line between the condenser and the expansion valve',
                    maintenance: 'Inspect for bubbles or discoloration during system service to assess refrigerant charge and moisture levels'
                }
            };
            
            // Populate component information
            const componentPath = window.location.pathname;
            const componentId = componentPath.split('/').pop();
            const componentInfoDiv = document.getElementById('componentInfo');
            
            // Debug information
            console.log('Component path:', componentPath);
            console.log('Component ID:', componentId);
            
            if (componentInfoDiv && componentId) {
                // Map URL paths to component info keys
                const componentMap = {
                    'pressure-switch': 'PressureSwitch',
                    'receiver-drier': 'ReceiverDrier',
                    'sight-glass': 'SightGlass',
                    'txv': 'TXV',
                    'compressor': 'Compressor',
                    'condenser': 'Condenser',
                    'cooling-coil': 'EvaporatorCoil'
                };
                
                const infoKey = componentMap[componentId] || componentId;
                console.log('Looking for component info with key:', infoKey);
                const info = componentInfo[infoKey];
                
                if (info) {
                    componentInfoDiv.innerHTML = `
                        <h5 class="mb-3 fw-bold">${info.name}</h5>
                        <p class="text-light">${info.description}</p>
                        <div class="mt-4">
                            <div class="p-3 rounded-4 mb-3" style="background-color: rgba(255,255,255,0.05);">
                                <h6 class="fw-bold"><i class="bi bi-gear-fill me-2 text-primary"></i>Function</h6>
                                <p class="text-light">${info.function}</p>
                            </div>
                            
                            <div class="p-3 rounded-4 mb-3" style="background-color: rgba(255,255,255,0.05);">
                                <h6 class="fw-bold"><i class="bi bi-geo-alt-fill me-2 text-info"></i>Component Placement</h6>
                                <p class="text-light">${info.location}</p>
                            </div>
                            
                            <div class="p-3 rounded-4" style="background-color: rgba(255,255,255,0.05);">
                                <h6 class="fw-bold"><i class="bi bi-tools me-2 text-warning"></i>Maintenance</h6>
                                <p class="text-light">${info.maintenance}</p>
                            </div>
                        </div>
                    `;
                } else {
                    componentInfoDiv.innerHTML = `<div class="p-4 rounded-4" style="background-color: rgba(220,53,69,0.1);"><p class="text-danger"><i class="bi bi-exclamation-triangle me-2"></i>Information for this component is not available.</p></div>`;
                }
            }
            
            // Function to initialize 3D model viewer
            function initModelViewer() {
                const container = document.getElementById('componentModelContainer');
                if (!container) return;
                
                const modelFile = container.getAttribute('data-model');
                if (!modelFile) {
                    console.error('No model file specified');
                    return;
                }
                
                const modelPath = `/models/${modelFile}`;
                
                // Set up the scene
                const scene = new THREE.Scene();
                scene.background = new THREE.Color(0x222222);
                
                // Set up the camera
                const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
                camera.position.z = 5;
                
                // Set up the renderer
                const renderer = new THREE.WebGLRenderer({ antialias: true });
                renderer.setSize(container.clientWidth, container.clientHeight);
                renderer.setPixelRatio(window.devicePixelRatio);
                
                // Add renderer to the container
                const threeJsContainer = document.getElementById('threeJsContainer');
                if (threeJsContainer) {
                    threeJsContainer.innerHTML = '';
                    threeJsContainer.appendChild(renderer.domElement);
                }
                
                // Add ambient light
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
                scene.add(ambientLight);
                
                // Add directional light
                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
                directionalLight.position.set(1, 1, 1);
                scene.add(directionalLight);
                
                // Add controls
                const controls = new THREE.OrbitControls(camera, renderer.domElement);
                controls.enableDamping = true;
                controls.dampingFactor = 0.25;
                controls.screenSpacePanning = false;
                controls.maxPolarAngle = Math.PI / 1.5;
                
                // Set up the GLTF loader
                const loader = new THREE.GLTFLoader();
                
                // Set up loading manager
                const loadingManager = new THREE.LoadingManager();
                
                loadingManager.onError = function(url) {
                    console.error('Error loading model:', url);
                    if (threeJsContainer) {
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'position-absolute top-0 start-0 p-3 bg-danger text-white';
                        errorDiv.style.zIndex = '10';
                        errorDiv.innerHTML = `<i class="bi bi-exclamation-triangle"></i> Error loading model: ${modelFile}`;
                        threeJsContainer.appendChild(errorDiv);
                    }
                };
                
                // Try to load the model
                let model = null;
                loader.load(modelPath, (gltf) => {
                    model = gltf.scene;
                    
                    // Center the model
                    const box = new THREE.Box3().setFromObject(model);
                    const center = box.getCenter(new THREE.Vector3());
                    const size = box.getSize(new THREE.Vector3());
                    
                    // Adjust model position to center it
                    model.position.x = -center.x;
                    model.position.y = -center.y;
                    model.position.z = -center.z;
                    
                    // Adjust camera position based on model size
                    const maxDim = Math.max(size.x, size.y, size.z);
                    const fov = camera.fov * (Math.PI / 180);
                    let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));
                    cameraZ *= 1.5; // Add some margin
                    camera.position.z = cameraZ;
                    
                    // Update camera near and far planes
                    camera.near = cameraZ / 100;
                    camera.far = cameraZ * 100;
                    camera.updateProjectionMatrix();
                    
                    // Add the model to the scene
                    scene.add(model);
                    
                    // Reset controls target to center of model
                    controls.target.set(0, 0, 0);
                    controls.update();
                }, undefined, loadingManager.onError);
                
                // Animation loop
                function animate() {
                    requestAnimationFrame(animate);
                    controls.update();
                    renderer.render(scene, camera);
                }
                animate();
                
                // Handle window resize
                window.addEventListener('resize', () => {
                    if (container) {
                        camera.aspect = container.clientWidth / container.clientHeight;
                        camera.updateProjectionMatrix();
                        renderer.setSize(container.clientWidth, container.clientHeight);
                    }
                });
                
                // Set up control buttons
                const rotateLeftBtn = document.getElementById('rotateLeft');
                const resetViewBtn = document.getElementById('resetView');
                const rotateRightBtn = document.getElementById('rotateRight');

                if (rotateLeftBtn) {
                    rotateLeftBtn.addEventListener('click', function() {
                        if (controls.rotateLeft) {
                            controls.rotateLeft(Math.PI / 8);
                        }
                    });
                }

                if (resetViewBtn) {
                    resetViewBtn.addEventListener('click', function() {
                        if (controls.reset) {
                            controls.reset();
                        }
                    });
                }

                if (rotateRightBtn) {
                    rotateRightBtn.addEventListener('click', function() {
                        if (controls.rotateLeft) {
                            controls.rotateLeft(-Math.PI / 8);
                        }
                    });
                }
            }
            
            // Function to adjust model viewer size based on screen size
            function adjustModelViewerForScreenSize() {
                const container = document.getElementById('componentModelContainer');
                if (container) {
                    // Adjust height based on screen width
                    if (window.innerWidth < 768) {
                        container.style.height = '300px';
                    } else if (window.innerWidth < 992) {
                        container.style.height = '400px';
                    } else {
                        container.style.height = '500px';
                    }
                }
            }
            
            // Initialize 3D model viewer
            initModelViewer();
            
            // Adjust model viewer size and set up resize listener
            adjustModelViewerForScreenSize();
            window.addEventListener('resize', adjustModelViewerForScreenSize);
            
            // Simplified AR setup
            const viewARButton = document.getElementById('viewAR');
            const arModelViewer = document.getElementById('arModelViewer');
            const threeJsContainer = document.getElementById('threeJsContainer');
            
            // Check if we're on a mobile device
            const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            console.log('Is mobile device:', isMobile);
            
            if (viewARButton && arModelViewer && threeJsContainer) {
                // Show a message if not on mobile
                if (!isMobile) {
                    viewARButton.title = 'AR requires a mobile device with AR support';
                }
                
                viewARButton.addEventListener('click', function() {
                    console.log('View in AR button clicked');
                    
                    if (!isMobile) {
                        alert('AR viewing requires a mobile device with AR support. Please open this page on a mobile device with AR capabilities.');
                        return;
                    }
                    
                    // Switch to model-viewer display
                    threeJsContainer.style.display = 'none';
                    arModelViewer.style.display = 'block';
                    
                    // Add a visible button to return to 3D view
                    const returnButton = document.createElement('button');
                    returnButton.id = 'returnTo3DButton';
                    returnButton.className = 'btn btn-primary position-absolute top-0 end-0 m-3';
                    returnButton.innerHTML = '<i class="bi bi-arrow-left"></i> Return to 3D View';
                    returnButton.addEventListener('click', function() {
                        // Switch back to Three.js viewer
                        arModelViewer.style.display = 'none';
                        threeJsContainer.style.display = 'block';
                        this.remove();
                    });
                    document.querySelector('.model-container').appendChild(returnButton);
                    
                    // Let the user tap the AR button directly
                    // This is more reliable across different devices and browsers
                    alert('Tap the "Enter AR" button that appears to view the component in your space.');
                });
                
                // Listen for AR session events
                arModelViewer.addEventListener('ar-status', (event) => {
                    console.log('AR status changed:', event.detail.status);
                    
                    if (event.detail.status === 'not-presenting') {
                        console.log('AR session ended');
                        // No need to add another return button as we already added one when clicking the AR button
                    } else if (event.detail.status === 'session-started') {
                        console.log('AR session started');
                        // Remove return button during AR session if it exists
                        const returnButton = document.getElementById('returnTo3DButton');
                        if (returnButton) returnButton.remove();
                    }
                });
            }
        });
    </script>
    <script src="/js/responsive.js"></script>
    <script src="https://unpkg.com/aos@next/dist/aos.js"></script>
    <script>
        // Initialize AOS animations with custom settings
        AOS.init({
            offset: 120,
            delay: 0,
            duration: 1000,
            easing: 'ease',
            once: false,
            mirror: false,
            anchorPlacement: 'top-bottom'
        });
    </script>
</body>
</html>
