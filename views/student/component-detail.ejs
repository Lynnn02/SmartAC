<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= componentName %> - SmartAC</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background-color: var(--body-bg);
            color: var(--text-color);
            padding-top: 60px; /* Adjusted padding for fixed header */
        }
        .component-header {
            padding: 2rem 0;
            margin-bottom: 2rem;
            background: linear-gradient(135deg, rgba(49, 135, 123, 0.2), rgba(59, 95, 224, 0.2));
        }
        .card {
            border-radius: 16px;
            box-shadow: 0 10px 20px rgba(0, 202, 188, 0.08);
            border: none;
            overflow: hidden;
            background-color: white;
            color: #333;
            margin-bottom: 1.5rem;
        }
        .card-header {
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            padding: 1.25rem 1.5rem;
            background-color: #f8f9fa;
            color: #333;
        }
        .card-body {
            padding: 1.5rem;
        }
        .list-group-item {
            background-color: white;
            border-color: rgba(0, 0, 0, 0.1);
            color: #333;
        }
        .model-container {
            height: 500px;
            position: relative;
            background-color: #f8f9fa;
        }
        .model-controls {
            background-color: #f8f9fa;
            border-top: 1px solid rgba(0, 0, 0, 0.1);
        }
        .footer-wrapper {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
    </style>
</head>
<body>
    <div class="container-fluid p-0 footer-wrapper">
        <!-- Include student header partial -->
        <%- include('../partials/student-header', { user: user, activePage: 'components' }) %>

        <div class="component-header">
            <div class="container">
                <div class="d-flex align-items-center">
                    <a href="/student/components" class="btn btn-outline-primary me-3">
                        <i class="bi bi-arrow-left"></i> Back to Components
                    </a>
                    <div>
                        <h1 class="mb-0" style="color: #333;"><%= componentName %></h1>
                        <p class="lead" style="color: #555;">Explore the 3D model and learn about this component</p>
                    </div>
                </div>
            </div>
        </div>

    <div class="container mb-5">
        <div class="row">
            <div class="col-lg-8">
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h4 class="mb-0"><i class="bi bi-cube me-2"></i>3D Model Viewer</h4>
                    </div>
                    <div class="card-body p-0">
                        <div class="model-container" id="componentModelContainer" data-model="<%= modelFile %>">
                            <div class="d-flex justify-content-center align-items-center h-100">
                                <div class="text-center">
                                    <div class="spinner-border text-primary mb-3" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                    <p>Loading 3D model...</p>
                                </div>
                            </div>
                        </div>
                        <div class="model-controls p-3 d-flex justify-content-between align-items-center">
                            <div>
                                <button class="btn btn-outline-primary me-2" id="rotateLeft"><i class="bi bi-arrow-counterclockwise"></i></button>
                                <button class="btn btn-outline-primary me-2" id="resetView"><i class="bi bi-aspect-ratio"></i></button>
                                <button class="btn btn-outline-primary" id="rotateRight"><i class="bi bi-arrow-clockwise"></i></button>
                            </div>
                            <button class="btn btn-success" id="viewAR"><i class="bi bi-phone me-1"></i> View in AR</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-lg-4">
                <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h4 class="mb-0"><i class="bi bi-info-circle me-2"></i>Component Information</h4>
                    </div>
                    <div class="card-body" id="componentInfo">
                        <div class="text-center">
                            <div class="spinner-border text-primary mb-3" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p>Loading component information...</p>
                        </div>
                    </div>
                </div>

                <div class="card shadow-sm">
                    <div class="card-header">
                        <h4 class="mb-0"><i class="bi bi-link-45deg me-2"></i>Related Components</h4>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <% if (componentId !== 'pressure-switch') { %>
                                <li class="list-group-item">
                                    <a href="/student/component/pressure-switch">Pressure Switch</a>
                                </li>
                            <% } %>
                            <% if (componentId !== 'receiver-drier') { %>
                                <li class="list-group-item">
                                    <a href="/student/component/receiver-drier">Receiver Drier</a>
                                </li>
                            <% } %>
                            <% if (componentId !== 'sight-glass') { %>
                                <li class="list-group-item">
                                    <a href="/student/component/sight-glass">Sight Glass</a>
                                </li>
                            <% } %>
                            <% if (componentId !== 'txv') { %>
                                <li class="list-group-item">
                                    <a href="/student/component/txv">Thermal Expansion Valve (TXV)</a>
                                </li>
                            <% } %>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Include student footer partial -->
    <%- include('../partials/student-footer') %>
    </div> <!-- End of footer-wrapper -->

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.132.2/examples/js/loaders/GLTFLoader.js"></script>
    <script>
        // Initialize the 3D model viewer
        document.addEventListener('DOMContentLoaded', function() {
            initModelViewer();
            
            // Set up AR view button
            const arButton = document.getElementById('viewAR');
            if (arButton) {
                arButton.addEventListener('click', function() {
                    alert('AR functionality will be implemented in a future update.');
                });
            }
            
            // Component information data
            const componentInfo = {
                'PressureSwitch': {
                    name: 'Pressure Switch',
                    description: 'The pressure switch is a safety device that monitors the refrigerant pressure in the AC system. It will shut off the compressor if the pressure gets too high or too low, protecting the system from damage.',
                    function: 'Controls the compressor based on refrigerant pressure levels',
                    location: 'Usually mounted on the high pressure line near the compressor',
                    maintenance: 'Check electrical connections and pressure calibration during system service'
                },
                'ReceiverDrier': {
                    name: 'Receiver Drier',
                    description: 'The receiver drier is a component that removes moisture from the refrigerant and stores excess refrigerant. It contains a desiccant material that absorbs moisture, preventing acid formation and system damage.',
                    function: 'Removes moisture from the refrigerant and stores excess refrigerant',
                    location: 'Typically located in the high pressure line between the condenser and expansion valve',
                    maintenance: 'Should be replaced when the system is opened for service or every 3-5 years'
                },
                'Compressor': {
                    name: 'Compressor',
                    description: 'The compressor is the heart of the AC system. It compresses the refrigerant gas, raising its pressure and temperature before sending it to the condenser.',
                    function: 'Compresses refrigerant gas to increase its pressure and temperature',
                    location: 'Usually mounted on the engine and driven by the serpentine belt',
                    maintenance: 'Check for leaks, unusual noises, and proper clutch engagement'
                },
                'Condenser': {
                    name: 'Condenser',
                    description: 'The condenser is a heat exchanger that releases heat from the refrigerant to the outside air. As the refrigerant cools, it condenses from a gas to a liquid.',
                    function: 'Releases heat from the refrigerant to the outside air, condensing it from a gas to a liquid',
                    location: 'Mounted at the front of the vehicle, usually in front of the radiator',
                    maintenance: 'Keep fins clean and free of debris, check for leaks or damage'
                },
                'TXV': {
                    name: 'Thermal Expansion Valve (TXV)',
                    description: 'The thermal expansion valve controls the flow of refrigerant into the evaporator. It maintains the proper pressure difference between the high and low sides of the system.',
                    function: 'Regulates refrigerant flow based on temperature and pressure conditions',
                    location: 'Located between the receiver drier and the evaporator',
                    maintenance: 'Check for proper operation during system service'
                },
                'EvaporatorCoil': {
                    name: 'Evaporator Coil',
                    description: 'The evaporator coil absorbs heat from the cabin air. As the refrigerant evaporates inside the coil, it absorbs heat, cooling the air that passes over it.',
                    function: 'Absorbs heat from the cabin air, cooling it before it enters the passenger compartment',
                    location: 'Located inside the dashboard, as part of the HVAC system',
                    maintenance: 'Check for leaks, clean periodically to prevent mold and mildew'
                }
            };
            
            // Populate component information
            const componentId = window.location.pathname.split('/').pop();
            const componentInfoDiv = document.getElementById('componentInfo');
            
            if (componentInfoDiv && componentId) {
                const info = componentInfo[componentId.replace(/-/g, '').replace(/^\w/, c => c.toUpperCase())];
                
                if (info) {
                    componentInfoDiv.innerHTML = `
                        <h5 class="mb-3">${info.name}</h5>
                        <p>${info.description}</p>
                        <div class="mt-4">
                            <h6><i class="bi bi-gear-fill me-2"></i>Function</h6>
                            <p>${info.function}</p>
                            
                            <h6><i class="bi bi-geo-alt-fill me-2"></i>Location</h6>
                            <p>${info.location}</p>
                            
                            <h6><i class="bi bi-tools me-2"></i>Maintenance</h6>
                            <p>${info.maintenance}</p>
                        </div>
                    `;
                } else {
                    componentInfoDiv.innerHTML = `<p class="text-danger">Information for this component is not available.</p>`;
                }
            }
            
            // Initialize 3D model viewer
            initModelViewer();
        });
        
        function initModelViewer() {
            const container = document.getElementById('componentModelContainer');
            if (!container) return;
            
            const modelFile = container.getAttribute('data-model');
            if (!modelFile) {
                console.error('No model file specified');
                return;
            }
            
            const modelPath = `/models/${modelFile}`;
            
            // Set up the scene
            const scene = new THREE.Scene();
            scene.background = new THREE.Color(0xf0f0f0);
            
            // Set up the camera
            const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);
            camera.position.z = 5;
            
            // Set up the renderer
            const renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(container.clientWidth, container.clientHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            container.innerHTML = '';
            container.appendChild(renderer.domElement);
            
            // Add ambient light
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);
            
            // Add directional light
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(1, 1, 1);
            scene.add(directionalLight);
            
            // Add controls
            const controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.25;
            controls.screenSpacePanning = false;
            controls.maxPolarAngle = Math.PI / 1.5;
            
            // Set up the GLTF loader
            const loader = new THREE.GLTFLoader();
            
            // Set up loading manager
            const loadingManager = new THREE.LoadingManager();
            
            loadingManager.onError = function(url) {
                console.error('Error loading model:', url);
                container.innerHTML = '';
                const errorDiv = document.createElement('div');
                errorDiv.className = 'position-absolute top-0 start-0 p-3 bg-danger text-white';
                errorDiv.style.zIndex = '10';
                errorDiv.innerHTML = `<i class="bi bi-exclamation-triangle"></i> Error loading model: ${modelFile}`;
                container.appendChild(errorDiv);
            };
            
            // Try to load the model
            let model = null;
            loader.load(modelPath, (gltf) => {
                model = gltf.scene;
                
                // Center the model
                const box = new THREE.Box3().setFromObject(model);
                const center = box.getCenter(new THREE.Vector3());
                const size = box.getSize(new THREE.Vector3());
                
                // Adjust model position to center it
                model.position.x = -center.x;
                model.position.y = -center.y;
                model.position.z = -center.z;
                
                // Adjust camera position based on model size
                const maxDim = Math.max(size.x, size.y, size.z);
                const fov = camera.fov * (Math.PI / 180);
                let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));
                cameraZ *= 1.5; // Add some margin
                camera.position.z = cameraZ;
                
                // Update camera near and far planes
                camera.near = cameraZ / 100;
                camera.far = cameraZ * 100;
                camera.updateProjectionMatrix();
                
                // Add the model to the scene
                scene.add(model);
                
                // Reset controls target to center of model
                controls.target.set(0, 0, 0);
                controls.update();
            }, undefined, loadingManager.onError);
            
            // Animation loop
            function animate() {
                requestAnimationFrame(animate);
                controls.update();
                renderer.render(scene, camera);
            }
            animate();
            
            // Handle window resize
            window.addEventListener('resize', () => {
                camera.aspect = container.clientWidth / container.clientHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(container.clientWidth, container.clientHeight);
            });
            
            // Set up control buttons
            const rotateLeftBtn = document.getElementById('rotateLeft');
            const resetViewBtn = document.getElementById('resetView');
            const rotateRightBtn = document.getElementById('rotateRight');

            if (rotateLeftBtn) {
                rotateLeftBtn.addEventListener('click', function() {
                    controls.rotateLeft(Math.PI / 8);
                });
            }

            if (resetViewBtn) {
                resetViewBtn.addEventListener('click', function() {
                    controls.reset();
                });
            }

            if (rotateRightBtn) {
                rotateRightBtn.addEventListener('click', function() {
                    controls.rotateLeft(-Math.PI / 8);
                });
            }
        }
        
        // Add responsive behavior for the 3D model viewer
        function adjustModelViewerForScreenSize() {
            const container = document.getElementById('componentModelContainer');
            if (container) {
                // Adjust height based on screen width
                if (window.innerWidth < 768) {
                    container.style.height = '300px';
                } else if (window.innerWidth < 992) {
                    container.style.height = '400px';
                } else {
                    container.style.height = '500px';
                }
            }
        }
        
        // Call on load and on resize
        adjustModelViewerForScreenSize();
        window.addEventListener('resize', adjustModelViewerForScreenSize);
    </script>
    <script src="/js/responsive.js"></script>
</body>
</html>
