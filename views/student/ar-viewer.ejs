<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AR Viewer - SmartAC</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <!-- Import the model-viewer component for AR support -->
    <script type="module" src="https://unpkg.com/@google/model-viewer/dist/model-viewer.min.js"></script>
    <style>
        body {
            margin: 0;
            padding: 0;
            overflow: hidden;
            height: 100vh;
            width: 100vw;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        }
        
        model-viewer {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            --poster-color: transparent;
        }
        
        .back-button {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 10;
            background-color: rgba(255, 255, 255, 0.8);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #333;
            text-decoration: none;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }
        
        .model-info {
            position: absolute;
            top: 20px;
            left: 70px;
            right: 20px;
            z-index: 10;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 8px;
            padding: 10px 15px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
        }
        
        .model-info h1 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }
        
        .model-info p {
            margin: 5px 0 0 0;
            font-size: 14px;
            color: #555;
        }
        
        .ar-prompt {
            position: absolute;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            padding: 15px 20px;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            width: 80%;
            max-width: 300px;
            z-index: 10;
        }
        
        .error-container {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 12px;
            padding: 20px;
            text-align: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            width: 80%;
            max-width: 300px;
            z-index: 100;
            display: none;
        }
        
        .error-icon {
            font-size: 36px;
            color: #dc3545;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>
    <!-- Back button -->
    <button onclick="goBack()" class="back-button">
        <i class="bi bi-arrow-left"></i>
    </button>
    
    <!-- Model info -->
    <div class="model-info">
        <h1><%= modelName %></h1>
        <p>Move your device to place the model in your environment</p>
    </div>
    
    <!-- Error container -->
    <div class="error-container" id="errorContainer">
        <i class="bi bi-exclamation-triangle error-icon"></i>
        <h3>AR Not Available</h3>
        <p id="errorMessage">AR is not supported on this device or browser.</p>
        <button class="btn btn-primary mt-3" onclick="window.history.back()">Go Back</button>
    </div>
    
    <!-- AR Prompt -->
    <div class="ar-prompt" id="arPrompt">
        <p><i class="bi bi-phone me-2"></i>Move your device around to place the 3D model</p>
    </div>
    
    <!-- Model Viewer with AR mode -->
    <model-viewer id="modelViewer"
        src="/models/<%= modelFile %>"
        alt="<%= modelName %> 3D Model"
        ar
        ar-modes="webxr scene-viewer quick-look"
        ar-scale="auto"
        camera-controls
        ar-placement="floor"
        seamless
        autoplay
        ar-status="not-presenting"
        shadow-intensity="1"
        environment-image="neutral"
        quick-look-browsers="safari chrome">
    </model-viewer>
    
    <script>
        // Function to handle back button click
        function goBack() {
            // If we're in an AR session, exit it first
            const modelViewer = document.getElementById('modelViewer');
            if (modelViewer && modelViewer.isARPresenting) {
                try {
                    // Try to exit AR mode gracefully
                    modelViewer.exitAR();
                    // Give it a moment to exit AR before closing the tab
                    setTimeout(() => {
                        window.close();
                    }, 300);
                } catch (e) {
                    console.error('Error exiting AR:', e);
                    // If we can't exit AR gracefully, just close the tab
                    window.close();
                }
            } else {
                // If not in AR, just close the tab immediately
                window.close();
            }
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            const modelViewer = document.getElementById('modelViewer');
            const errorContainer = document.getElementById('errorContainer');
            const errorMessage = document.getElementById('errorMessage');
            const arPrompt = document.getElementById('arPrompt');
            
            // Check if model file is provided
            const modelFile = '<%= modelFile %>';
            if (!modelFile) {
                showError('No model file specified.');
                return;
            }
            
            // Function to show error
            function showError(message) {
                errorContainer.style.display = 'block';
                errorMessage.textContent = message;
                arPrompt.style.display = 'none';
            }
            
            // Auto-activate AR when the model is loaded
            modelViewer.addEventListener('load', function() {
                // Check if AR is available
                if (modelViewer.canActivateAR) {
                    // Small delay to ensure everything is ready
                    setTimeout(() => {
                        try {
                            modelViewer.activateAR();
                        } catch (e) {
                            console.error('Error activating AR:', e);
                            // If auto-activation fails, we'll let the user tap the model to activate AR
                        }
                    }, 1000);
                } else {
                    showError('AR is not supported on this device or browser. Please try using a compatible mobile device.');
                }
            });
            
            // Handle AR session started
            modelViewer.addEventListener('ar-status', function(event) {
                if (event.detail.status === 'session-started') {
                    // AR session has started, hide the prompt
                    arPrompt.style.display = 'none';
                } else if (event.detail.status === 'not-presenting') {
                    // AR session not active, show the prompt
                    arPrompt.style.display = 'block';
                }
            });
            
            // Handle model error
            modelViewer.addEventListener('error', function(event) {
                console.error('Error loading model:', event);
                showError('Failed to load the 3D model. The model file may not exist or is in an unsupported format.');
            });
            
            // Fallback for devices that don't support auto-activation
            modelViewer.addEventListener('click', function() {
                if (modelViewer.canActivateAR && !modelViewer.isARPresenting) {
                    try {
                        modelViewer.activateAR();
                    } catch (e) {
                        console.error('Error activating AR on click:', e);
                    }
                }
            });
        });
    </script>
</body>
</html>
